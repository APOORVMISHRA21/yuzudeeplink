{
  "title": "Pattern specification",
  "basic": "Basic",
  "wildcard_title": "Wildcard",
  "wildcard_sharp_info": "Match a single numeric(0-9) character (interpreted as '\\d')",
  "wildcard_question_info": "Match any single character (interpreted as '.')",
  "wildcard_asterisk_info": "Match any zero or more characters (interpreted as '.*')",
  "wildcard_plus_info": "Match any one or more characters (interpreted as '.+')",
  "wildcard_escape": "If you want to use these characters as ordinary letters, prepend the backslash.",
  "wildcard_regexp": "Also, you can use the regular expression by surrounding with<code>[]</code>.",
  "wildcard_case": "All patterns are distinguished between uppercase and lowercase letters.",
  "wildcard_desc_title": "Wildcard description",
  "wildcard_desc_sharp": "Wildcard'#'",
  "wildcard_desc_sharp_info": "'#' matches 0-9 one of the numbers.",
  "wildcard_desc_sharp_ex1": "ex.1)Pattern string = <code>IMG#.jpg</code>",
  "wildcard_desc_sharp_ex1_info": "If a URL includes <code>IMG0.jpg</code> or <code>IMG1.jpg</code> or ... or <code>IMG9.jpg</code>, it is matched.",
  "wildcard_desc_sharp_ex1_but": "In the case of <code>http://www.test.com/IMG.jpg</code>, because a number doesn't come after \"IMG\", this URL isn't matched.",
  "wildcard_desc_sharp_ex2": "ex.2)Pattern string = <code>IMG###.jpg</code>",
  "wildcard_desc_sharp_ex2_info": "If a URL includes <code>IMG000.jpg</code> or <code>IMG001.jpg</code> or ... or <code>IMG999.jpg</code>, it is matched.",
  "wildcard_desc_sharp_ex2_but": "In the case of <code>http://www.test.com/IMG0a1.jpg</code>, because it doesn't include three consecutive numerical value, this URL isn't matched.",
  "wildcard_desc_question": "Wildcard'?'",
  "wildcard_desc_question_info": "'?' matches with any single character.",
  "wildcard_desc_question_ex1": "ex.1)Pattern string = <code>IMG_?.jpg</code>",
  "wildcard_desc_question_ex1_info": "If a URL includes the expression that some one character is inserted between <code>IMG_</code> and <code>.jpg</code>, it is matched.",
  "wildcard_desc_question_ex1_ex": "In the case of <code>http://www.test.com/IMG_l.jpg</code>, this URL is matched.",
  "wildcard_desc_question_ex2": "ex.2)Pattern string = <code>IMG_???.jpg</code>",
  "wildcard_desc_question_ex2_info": "This pattern matches the URL that some three characters are inserted between between <code>IMG_</code> and <code>.jpg</code>.",
  "wildcard_desc_asterisk": "Wildcard'*'",
  "wildcard_desc_asterisk_info": "'*' matches with any zero or more characters.",
  "wildcard_desc_asterisk_ex": "ex.)Pattern string = <code>IMG_*.jpg</code>",
  "wildcard_desc_asterisk_ex_info": "If a URL includes the expression that some zero or more characters is inserted between <code>IMG_</code> and <code>.jpg</code>, it is matched.",
  "wildcard_desc_asterisk_ex_info_ex": "Therefore it matches both of <code>IMG_.jpg</code>, <code>IMG_000.jpg</code> and <code>IMG_000abc.jpg</code>.",
  "wildcard_desc_plus": "Wildcard'+'",
  "wildcard_desc_plus_info": "'+' matches with any one or more characters.",
  "wildcard_desc_plus_ex": "ex.)Pattern string = <code>IMG_+.jpg</code>",
  "wildcard_desc_plus_ex_info": "If a URL includes the expression that some one or more characters is inserted between <code>IMG_</code> and <code>.jpg</code>, it is matched.<br>Therefore it matches both of <code>IMG_.jpg</code>, <code>IMG_000.jpg</code> and <code>IMG_000abc.jpg</code>.",
  "wildcard_desc_plus_ex_not": "It don't match, if there is nothing between <code>IMG_</code> and <code>.jpg</code>.",
  "wildcard_desc_plus_ex_then": "Therefore it matches both of <code>IMG_000.jpg</code> and <code>IMG_000abc.jpg</code>.",
  "wildcard_desc_regexp": "The pattern enclosed in '[]' is treated as a regular expression.",
  "wildcard_desc_regexp_info": "Regular expressions conform to Java specifications.",
  "wildcard_desc_regexp_ex": "ex.)<code>[https?://www\\.test\\.com/IMG_*\\.jpg]</code>",
  "pattern_title": "Pattern match",
  "pattern_info": "If you do not apply a scheme such as <code>http://</code>, it will be automatically supplemented.(add <code>^\\w+://</code>)",
  "pattern_ex": "If you make a pattern like <code>*test.com</code>, it will match the URL, such as <code>http://other.com/?page=test.com</code>.",
  "pattern_sub_domain": "If you want to replace a subdomain",
  "pattern_sub_domain_info": "Start with <code>*.</code>or <code>http://*.</code>. (Replace <code>*.</code> with <code>((?![./]).)*</code>)",
  "pattern_sub_domain_ex": "ex.)Pattern string =<code>*.test.com</code>",
  "pattern_sub_domain_match": "Match <code>mobile.test.com</code>, <code>doc.test.com</code>",
  "pattern_sub_domain_not": "However, <code>mobile.doc.test.com</code> does not match because the subdomain contains <code>.</code>.",
  "pattern_https": "If the pattern starts with <code>http*://</code>",
  "pattern_https_info": "This is not necessary because this part is automatically complemented by the browser.",
  "pattern_https_replace": "This description will be replaced internally to <code>https?://</code> to prevent false positives.",
  "ad_block_title": "Ad block",
  "ad_block_not_wildcard": "If you do not use wildcard, it will be faster.",
  "ad_block_not_regex": "In addition, performance is worse if there is a complex pattern in the regular expression.",
  "ad_block_not_use_wildcard": "If you do not use wildcard(<code>#?*+</code>)",
  "ad_block_not_use_wildcard_info": "If there is a specified string in the URL, block it.",
  "ad_block_not_use_wildcard_ex": "ex.)Pattern string =<code>ad.jpg</code>",
  "ad_block_not_use_wildcard_ex_info": "Block <code>http://test.com/ad/ad.jpg</code>, <code>https://test.jp/ad/img/ad.jpg</code> etc.",
  "ad_block_use_wildcard": "If you use wildcard(<code>#?*+</code>)",
  "ad_block_use_wildcard_info": "See the wildcard description for more information.",
  "ad_block_host": "Host block",
  "ad_block_host_info": "Block all specified hosts.",
  "ad_block_host_perfect": "Perfect match",
  "ad_block_host_perfect_info": "<code>h ad.test.com</code> Specify put a space after the the 'h' as.",
  "ad_block_host_perfect_info_ex": "It is useful to block <code>http://ad.test.com</code> without blocking <code>http://test.com</code>.",
  "ad_block_host_perfect_info_wildcard": "Wild cards can also be used.",
  "ad_block_host_perfect_ex": "ex.)<code>h ad.+.com</code>, <code>h ad.test.*</code>",
  "ad_block_host_perfect_hosts": "<code>127.0.0.1 ad.com</code> can also be specified in a host format, such as.",
  "ad_block_host_partial": "Partial Match",
  "ad_block_host_partial_info": "<code>c ad.com</code> Specify put a space after the the 'c' as.",
  "ad_block_host_partial_info_ex": "Block <code>http://ad.com</code>, <code>http://abc.ad.com</code>, <code>http://ad001.ad.com</code> etc.",
  "ad_block_host_partial_not_wildcard": "Wild cards can NOT be used.",
  "ad_block_host_regex": "When using regular expressions in host block",
  "ad_block_host_regex_info": "<code>h [test\\.com]</code> can be specified as."
}
